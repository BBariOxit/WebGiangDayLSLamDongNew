import pg from 'pg';
import 'dotenv/config';

const { Pool } = pg;
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 55432,
  database: process.env.DB_NAME || 'webgiangday_db',
  user: process.env.DB_USER || 'admin',
  password: process.env.DB_PASSWORD || 'admin123',
});

const SECTION_BANK = [
  {
    slug: 'lang-biang-lich-su-hinh-thanh',
    sections: [
      { type: 'heading', title: 'Lang Biang ‚Äì n·ªÅn vƒÉn h√≥a b·∫£n ƒë·ªãa' },
      { type: 'text', title: 'B·ªëi c·∫£nh t·ª± nhi√™n', content_html: '<ul><li>Vi kh√≠ h·∫≠u m√°t, ngu·ªìn n∆∞·ªõc ƒë·∫ßu ngu·ªìn d·ªìi d√†o.</li><li>Th·∫£m th·ª±c v·∫≠t phong ph√∫ t·∫°o ƒëi·ªÅu ki·ªán sinh k·∫ø.</li><li>V·ªã tr√≠ trung gian gi·ªØa duy√™n h·∫£i ‚Äì cao nguy√™n.</li></ul>' },
      { type: 'text', title: 'C·ªông ƒë·ªìng c∆∞ tr√∫', content_html: '<p>K\'Ho ‚Äì L·∫°ch ‚Äì Chil ƒë·ªãnh c∆∞ l√¢u ƒë·ªùi, h√¨nh th√†nh tri th·ª©c b·∫£n ƒë·ªãa v·ªÅ th·ªï nh∆∞·ª°ng ‚Äì kh√≠ h·∫≠u ‚Äì t√†i nguy√™n.</p>' },
      { type: 'image_gallery', title: 'H√¨nh ·∫£nh', data: { images: [ { url: 'https://picsum.photos/seed/langbiang-mountain/1200/800', caption: 'Phong c·∫£nh Lang Biang' } ] } },
      { type: 'divider' }
    ]
  },
  {
    slug: 'bao-loc-truc-nong-cong-nghiep',
    sections: [
      { type: 'heading', title: 'B·∫£o L·ªôc ‚Äì tr·ª•c n√¥ng s·∫£n ch·∫ø bi·∫øn' },
      { type: 'text', title: 'Chu·ªói gi√° tr·ªã', content_html: '<ul><li>Ch√® ch·∫•t l∆∞·ª£ng cao.</li><li>C√† ph√™ ƒë·∫∑c s·∫£n.</li><li>T∆° t·∫±m ‚Äì l·ª•a.</li></ul>' },
      { type: 'text', title: 'Vai tr√≤ v√πng', content_html: '<p>C√¢n b·∫±ng c·ª±c ph√°t tri·ªÉn ph√≠a Nam t·ªânh, gi·∫£m √°p l·ª±c ƒë√¥ th·ªã ƒê√† L·∫°t.</p>' },
      { type: 'image_gallery', title: 'H√¨nh ·∫£nh', data: { images: [ { url: 'https://picsum.photos/seed/baoloc-tea/1200/800', caption: 'ƒê·ªìi ch√® B·∫£o L·ªôc' } ] } }
    ]
  }
];

async function getLessonIdBySlug(client, slug) {
  const r = await client.query(`SELECT lesson_id FROM lessons WHERE slug=$1 LIMIT 1`, [slug]);
  return r.rows[0]?.lesson_id || null;
}

async function seedSections(client, lessonId, sections) {
  await client.query('DELETE FROM lesson_sections WHERE lesson_id=$1', [lessonId]);
  let order = 1;
  for (const s of sections) {
    await client.query(`
      INSERT INTO lesson_sections (lesson_id, type, title, content_html, data, order_index)
      VALUES ($1,$2,$3,$4,$5,$6)
    `, [lessonId, s.type, s.title || null, s.content_html || null, s.data ? JSON.stringify(s.data) : '{}', order++]);
  }
}

async function main() {
  const client = await pool.connect();
  try {
    console.log('üìö Seeding lesson sections...');
    await client.query('BEGIN');
    for (const item of SECTION_BANK) {
      const lessonId = await getLessonIdBySlug(client, item.slug);
      if (!lessonId) { console.warn('‚ö†Ô∏è  Lesson not found:', item.slug); continue; }
      await seedSections(client, lessonId, item.sections);
      console.log('‚úÖ Seeded sections for', item.slug);
    }
    await client.query('COMMIT');
    console.log('üéâ Lesson sections seed completed.');
  } catch (e) {
    await client.query('ROLLBACK');
    console.error('‚ùå Seed lesson sections failed:', e);
    process.exitCode = 1;
  } finally {
    client.release();
    await pool.end();
  }
}

main();
